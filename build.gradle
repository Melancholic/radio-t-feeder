buildscript {
    ext {
        kotlin_version = "2.1.10"
        spring_boot_version = "3.5.0"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version")
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlin_version"
    id 'org.springframework.boot' version "$spring_boot_version"
    id "io.spring.dependency-management" version "1.1.4"
    id "nebula.release" version "19.0.10"
}

sourceCompatibility = 17
targetCompatibility = 17


ext {
    quartz_version = '2.3.2'
    rome_version = '1.19.0'
    owasp_version = '20220608.1'
    telegrambots_version = '6.9.7.0'
    }
dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework:spring-context-support"
    implementation "org.springframework:spring-aspects"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'

    implementation "org.telegram:telegrambots"
    implementation "org.telegram:telegrambots-spring-boot-starter:$telegrambots_version"
    implementation "org.telegram:telegrambotsextensions:$telegrambots_version"
    implementation "net.bramp.ffmpeg:ffmpeg:0.8.0"
    implementation "com.rometools:rome:$rome_version"
    implementation "com.rometools:rome-fetcher:$rome_version"
    implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:$owasp_version"
    implementation "org.quartz-scheduler:quartz:$quartz_version"
    implementation "org.quartz-scheduler:quartz-jobs:$quartz_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

repositories {
    mavenCentral()
}

task distrib(type: Zip, dependsOn: bootJar) {
    def baseName = "${project.name}-${project.version}"

    into("$baseName/") {
        from('build/libs') {
            include "${baseName}.jar"
        }
        from("deploy/common")
    }

    def buildType = "snapshot"
    if (project.version.toString().matches("\\d+\\.\\d+\\.\\d+")) {
        buildType = "production"
    }

    into("$baseName/") {
        from("deploy/$buildType/") {
            include 'docker-compose.yml'
        }
    }
    into("$baseName/credentials") {
        from("deploy/$buildType/") {
            include '*.env'
        }
    }


    archiveFileName.set("${baseName}.zip")

}

build.dependsOn(distrib)
compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}